# Article Update Example - Replacing Existing Content
# This example shows how to replace/update an existing article using its d-tag

bot_name: "Article Update Bot"
bot_description: "Updates existing articles by reusing their d-tags"

# Event kind (30023 for long-form content)
event_kind: 30023

# Nostr identity configuration
npub:
  environment_variable: "NOSTR_BOT_KEY1"
  public_key: "npub1r0r9c7upagp9s5vmxqkcjymj4mqwqw2g8m029j7pgthr2u2yl5dsn9a3r6"

# Relay configuration
relays: "favorite-relays"

# Article metadata
title: "Getting Started with Nostr - Updated Edition"
summary: "An updated and expanded guide to the Nostr protocol with latest developments"
image: "https://i.nostr.build/nostr-guide-v2.jpg"
topics: ["nostr", "guide", "tutorial", "updated"]

# IMPORTANT: Reuse the d-tag from an existing article to replace it
# This will create a new version that replaces the old content
reuse_d_tag: "getting-started-with-nostr-1640995200"

# Content files to load
content_files:
  markdown: "botData/articleUpdateExample/updated-article.md"

# Optional: Create notification about the update
create_notification: true
notification_text: "Article updated with latest Nostr developments"

# Custom tags
custom_tags:
  - ["client", "nostrbots"]
  - ["version", "2.0"]
  - ["updated", "2024"]
